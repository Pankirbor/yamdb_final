# .github/workflows/**yamdb_workflows.yml**
name: Django-app workflow

on:
  push:
    branches: [ master ]

  pull_request:
    branches: [ master ]

jobs:
  tests:
    # «Раннер» — создание изолированного окружения с последней версией Ubuntu
    runs-on: ubuntu-latest

    steps:
    # Запуск actions checkout — готового скрипта
    # для клонирования репозитория
    - uses: actions/checkout@v2
    - name: Set up Python
      # Запуск actions setup-python — готового скрипта
      # для развёртывания окружения Python
      uses: actions/setup-python@v2
      with:
        # Выбор версии Python
        python-version: 3.7

    - name: Install dependencies
      run: |
        # обновление pip
        python -m pip install --upgrade pip
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort

        cd api_yamdb
        # установка зависимостей
        pip install -r requirements.txt

    - name: Test with flake8 and django tests
      run: |
        # запуск проверки проекта по flake8
        python -m flake8

        #cd infra_project/

        python -m pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOC_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        # Пуш образа в Docker Hub
        uses: docker/build-push-action@v2

        with:
          context: ./api_yamdb
          push: true
          tags: pankirbor/api_yamdb:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.USER_SERVER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            echo "вход на сервер осуществлен"
            sudo docker-compose stop
            echo "докер компос остановлен"
            sudo docker-compose rm web
            echo "контейнер удален"
            sudo docker pull ${{ secrets.DOC_USERNAME }}/api_yamdb:latest
            echo "образ скачен"
            touch .env
            echo "вход на сервер осуществлен"
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
            echo DB_NAME=${{ secrets.DB_NAME }} > .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} > .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} > .env
            echo DB_HOST=${{ secrets.DB_HOST }} > .env
            echo DB_PORT=${{ secrets.DB_PORT }} > .env
            echo "все перемнные окружения записаны в файл"
            sudo docker-compose up -d
            sudo docker-compose exec web python manage.py migrate
            echo "sudo docker-compose exec web python manage.py collectstatic --no-input"





  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!